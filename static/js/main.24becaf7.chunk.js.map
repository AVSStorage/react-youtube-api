{"version":3,"sources":["components/VideoListItem.tsx","components/VideoList.tsx","components/SearchBar.tsx","components/VideoDetail.tsx","Page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["VideoListItem","video","onVideoSelect","imageURL","snippet","thumbnails","default","url","onClick","className","alt","src","title","VideoList","props","videos","map","key","etag","state","term","dfltVl","this","setState","onSearchTermChange","value","onChange","e","onInputChange","target","Comp","VideoDetail","videoId","id","description","Page","selectedVideo","videoSearch","YTSearch","_","debounce","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gSAwBeA,EArBqC,SAAC,GAG9C,IAFLC,EAEI,EAFJA,MACAC,EACI,EADJA,cAEMC,EAAWF,EAAMG,QAAQC,WAAWC,QAAQC,IAClD,OACE,wBAAIC,QAAS,kBAAMN,EAAcD,IAAQQ,UAAU,mBAChD,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,cACb,yBAAKC,IAAI,GAAGD,UAAU,eAAeE,IAAKR,KAE5C,yBAAKM,UAAU,cACb,yBAAKA,UAAU,iBACZR,EAAMG,QAAQQ,WCFbC,EAV6B,SAAAC,GAAK,OAC7C,wBAAIL,UAAU,uBACVK,EAAMC,OAAOC,KAAI,SAAAf,GAAK,OAAI,kBAAC,EAAD,CACxBC,cAAeY,EAAMZ,cACrBe,IAAKhB,EAAMiB,KACXjB,MAAOA,S,oDCFb,WAAYa,GAAwB,IAAD,8BAC/B,cAAMA,IACDK,MAAQ,CACTC,KAAMN,EAAMO,QAHe,E,0DAOrBD,GACVE,KAAKC,SAAS,CACVH,SAEJE,KAAKR,MAAMU,mBAAmBJ,K,+BAGxB,IAAD,OACL,OAAQ,yBAAKX,UAAU,cACnB,2BACIgB,MAAOH,KAAKH,MAAMC,KAClBM,SAAU,SAAAC,GAAC,OAAI,EAAKC,cAAcD,EAAEE,OAAOJ,e,GArB9BK,aCqBdC,EArBiC,SAAC,GAAe,IAAb9B,EAAY,EAAZA,MAC/C,IAAKA,EAAO,OAAO,2CADwC,IAGvD+B,EACA/B,EAAMgC,GADND,QAEEzB,EAAG,wCAAoCyB,GAE7C,OACI,yBAAKvB,UAAU,yBACX,yBAAKA,UAAU,2CACX,4BAAQE,IAAKJ,EAAKE,UAAU,2BAEhC,yBAAKA,UAAU,WACX,6BAAMR,EAAMG,QAAQQ,OACpB,6BAAMX,EAAMG,QAAQ8B,gBCDfC,E,kDACjB,WAAYrB,GAAY,IAAD,8BACnB,cAAMA,IACDK,MAAQ,CACTJ,OAAQ,GACRqB,cAAe,KACfhB,KAAM,OAGV,EAAKiB,YAAY,EAAKlB,MAAMC,MART,E,wDAWXA,GAAe,IAAD,OACtBkB,IAAS,CACDrB,IAtBA,0CAuBAG,SAEJ,SAACL,GAAD,OAA0B,EAAKQ,SAAS,CACpCR,SACAqB,cAAerB,EAAO,U,+BAIxB,IAAD,OACCsB,EAAcE,IAAEC,UAAS,SAACpB,GAAD,OAAkB,EAAKiB,YAAYjB,KAAO,KACzE,OAAQ,6BACJ,kBAAC,EAAD,CAAWI,mBAAoBa,EAAahB,OAAQC,KAAKH,MAAMC,OAC/D,kBAAC,EAAD,CAAanB,MAAOqB,KAAKH,MAAMiB,gBAC/B,kBAAC,EAAD,CACIrB,OAAQO,KAAKH,MAAMJ,OACnBb,cAAe,SAACkC,GAAD,OAA0B,EAAKb,SAAS,CAACa,0B,GA9BtCN,aCJnBW,MAVf,WACE,OACE,yBAAKhC,UAAU,OACd,6BAASA,UAAU,YACjB,kBAAC,EAAD,SCKaiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.24becaf7.chunk.js","sourcesContent":["import React from 'react';\nimport {VideoListItemProps} from './Types';\n\nconst VideoListItem : React.FC<VideoListItemProps>= ({\n  video,\n  onVideoSelect\n}) => {\n  const imageURL = video.snippet.thumbnails.default.url;\n  return (\n    <li onClick={() => onVideoSelect(video)} className=\"list-group-item\">\n       <div className=\"video_list media\">\n         <div className=\"media-left\">\n           <img alt=\"\" className=\"media-object\" src={imageURL} />\n         </div>\n         <div className=\"media-body\">\n           <div className=\"media-heading\">\n             {video.snippet.title}\n           </div>\n         </div>\n       </div>\n     </li>\n  );\n};\n\nexport default VideoListItem","import React from 'react';\nimport VideoListItem from './VideoListItem';\nimport {VideoListProps} from './Types';\n\nconst VideoList: React.FC<VideoListProps> = props => (\n    <ul className=\"col-md-4 list-group\">\n      { props.videos.map(video => <VideoListItem\n          onVideoSelect={props.onVideoSelect}\n          key={video.etag}\n          video={video} />)}\n    </ul>\n\n);\n\nexport default VideoList;","import React, {Component as Comp} from 'react';\nimport {SeacrhBarProps, SearchBarState} from './Types';\n\n\nexport default class extends Comp<SeacrhBarProps, SearchBarState> {\n\n\n    constructor(props: SeacrhBarProps) {\n        super(props);\n        this.state = {\n            term: props.dfltVl\n        };\n    }\n\n    onInputChange(term: string) {\n        this.setState({\n            term\n        });\n        this.props.onSearchTermChange(term);\n    }\n\n    render() {\n        return (<div className=\"search-bar\">\n            <input\n                value={this.state.term}\n                onChange={e => this.onInputChange(e.target.value)}\n            />\n        </div>);\n    }\n}\n","import React from 'react';\nimport {ViseoDetailProps} from './Types';\n\n\nconst VideoDetail: React.FC<ViseoDetailProps> = ({ video }) => {\n    if (!video) return <div>Loading...</div>;\n    const {\n        videoId\n    } = video.id;\n    const url = `https://www.youtube.com/embed/${videoId}`;\n\n    return (\n        <div className=\"video-detail col-md-8\">\n            <div className=\"embed-responsive embed-responsive-16by9\">\n                <iframe src={url} className=\"embed-responsive-item\"/>\n            </div>\n            <div className=\"details\">\n                <div>{video.snippet.title}</div>\n                <div>{video.snippet.description}</div>\n            </div>\n        </div>\n    );\n};\n\n\nexport default VideoDetail;\n","import React, {Component as Comp} from 'react';\n// @ts-ignore\nimport YTSearch from 'youtube-api-search';\nimport _ from 'lodash';\nimport VideoList from './components/VideoList';\nimport SearchBar from './components/SearchBar';\nimport VideoDetail from './components/VideoDetail';\nimport {Video} from \"youtube-api-search-typed\";\n\nconst API_KEY = 'AIzaSyBQsW5wYtoX1p-Ebz2dhwt1Ti1CZ621h9E';\n\ntype StateProps = {\n    videos: Array<Video>,\n    selectedVideo: null | Video,\n    term: string\n}\n\nexport default class Page extends Comp<{}, StateProps> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            videos: [],\n            selectedVideo: null,\n            term: 'Cat'\n        };\n\n        this.videoSearch(this.state.term);\n    }\n\n    videoSearch(term: string) {\n        YTSearch({\n                key: API_KEY,\n                term\n            },\n            (videos: Array<Video>) => this.setState({\n                videos,\n                selectedVideo: videos[0]\n            }));\n    }\n\n    render() {\n        const videoSearch = _.debounce((term: string) => this.videoSearch(term), 300);\n        return (<div>\n            <SearchBar onSearchTermChange={videoSearch} dfltVl={this.state.term}/>\n            <VideoDetail video={this.state.selectedVideo}/>\n            <VideoList\n                videos={this.state.videos}\n                onVideoSelect={(selectedVideo: Video) => this.setState({selectedVideo})}\n            />\n        </div>);\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Page from './Page'\nfunction App() {\n  return (\n    <div className=\"App\">\n     <section className=\"App-body\">\n       <Page/>\n     </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}